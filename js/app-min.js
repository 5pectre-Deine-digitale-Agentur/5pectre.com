import*as THREE from"https://cdnjs.cloudflare.com/ajax/libs/three.js/r126/three.min.js";import imagesLoaded from"https://unpkg.com/imagesloaded@4/imagesloaded.pkgd.min.js";import FontFaceObserver from"https://cdnjs.cloudflare.com/ajax/libs/fontfaceobserver/1.1.1/fontfaceobserver.standalone.js";import Scroll from"./scroll.js";import{OrbitControls}from"https://threejs.org/examples/js/controls/OrbitControls.js";import{GLTFLoader}from"https://cdn.rawgit.com/mrdoob/three.js/master/examples/js/loaders/GLTFLoader.js";import*as dat from"https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js";import gsap from"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.6.1/gsap.min.js";import{EffectComposer}from"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/jsm/postprocessing/EffectComposer.js";import{RenderPass}from"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/jsm/postprocessing/RenderPass.js";import{ShaderPass}from"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/jsm/postprocessing/ShaderPass.js";import{UnrealBloomPass}from"https://raw.githubusercontent.com/mrdoob/three.js/dev/examples/jsm/postprocessing/UnrealBloomPass.js";export default class Sketch{constructor(e){this.scene=new THREE.Scene,this.container=e.dom,this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.setSize(this.width,this.height),this.container.appendChild(this.renderer.domElement),this.images=[...document.querySelectorAll(".three")];let t=[new Promise(((e,t)=>{imagesLoaded(document.querySelectorAll("img"),{background:!0},e)}))];this.currentScroll=0,this.previousScroll=0,this.raycaster=new THREE.Raycaster,this.mouse=new THREE.Vector2,Promise.all(t).then((()=>{this.scroll=new Scroll,this.addImages(),this.setPosition(),this.resize(),this.setupResize(),this.composerPass(),this.render(),this.mouseMovement()})),this.camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,100,2e3),this.camera.position.z=600,this.camera.fov=2*Math.atan(this.height/2/600)*(180/Math.PI),this.controls=new OrbitControls(this.camera,this.renderer.domElement),this.time=0,this.isPlaying=!0}composerPass(){this.composer=new EffectComposer(this.renderer),this.renderPass=new RenderPass(this.scene,this.camera),this.composer.addPass(this.renderPass);this.myEffect={uniforms:{tDiffuse:{value:null},scrollSpeed:{value:null},time:{value:null}},vertexShader:"\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix\n          * modelViewMatrix\n          * vec4( position, 1.0 );\n      }\n      ",fragmentShader:`\n      uniform sampler2D tDiffuse;\n      varying vec2 vUv;\n      uniform float scrollSpeed;\n      uniform float time;\n      ${document.getElementById("noise")}\n      void main(){\n        vec2 newUV = vUv;\n        float area = smoothstep(1.,0.8,vUv.y)*2. - 1.;\n        float area1 = smoothstep(0.4,0.0,vUv.y);\n        area1 = pow(area1,4.);\n        float noise = 0.5*(cnoise(vec3(vUv*10.,time/5.)) + 1.);\n        float n = smoothstep(0.5,0.51, noise + area/2.);\n        newUV.x -= (vUv.x - 0.5)*0.1*area1*scrollSpeed;\n        gl_FragColor = texture2D( tDiffuse, newUV);\n      //   gl_FragColor = vec4(n,0.,0.,1.);\n      }\n      `},this.customPass=new ShaderPass(this.myEffect),this.customPass.renderToScreen=!0,this.composer.addPass(this.customPass)}mouseMovement(){window.addEventListener("mousemove",(e=>{this.mouse.x=e.clientX/this.width*2-1,this.mouse.y=-e.clientY/this.height*2+1,this.raycaster.setFromCamera(this.mouse,this.camera);const t=this.raycaster.intersectObjects(this.scene.children);if(t.length>0){t[0].object.material.uniforms.hover.value=t[0].uv}}),!1)}settings(){this.settings={progress:0},this.gui=new dat.GUI,this.gui.add(this.settings,"progress",0,1,.01)}setupResize(){window.addEventListener("resize",this.resize.bind(this))}resize(){this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.renderer.setSize(this.width,this.height),this.camera.aspect=this.width/this.height,this.camera.updateProjectionMatrix()}addImages(){this.material=new THREE.ShaderMaterial({uniforms:{time:{value:0},uImage:{value:0},hover:{value:new THREE.Vector2(.5,.5)},hoverState:{value:0}},side:THREE.DoubleSide,fragmentShader:document.getElementById("fragment"),vertexShader:document.getElementById("vertex")}),this.materials=[],this.imageStore=this.images.map((e=>{let t=e.getBoundingClientRect(),s=new THREE.PlaneBufferGeometry(t.width,t.height,10,10),i=new THREE.Texture(e);i.needsUpdate=!0;let r=this.material.clone();e.addEventListener("mouseenter",(()=>{gsap.to(r.uniforms.hoverState,{duration:1,value:1,ease:"power3.out"})})),e.addEventListener("mouseout",(()=>{gsap.to(r.uniforms.hoverState,{duration:1,value:0,ease:"power3.out"})})),this.materials.push(r),r.uniforms.uImage.value=i;let o=new THREE.Mesh(s,r);return this.scene.add(o),{img:e,mesh:o,top:t.top,left:t.left,width:t.width,height:t.height}}))}setPosition(){this.imageStore.forEach((e=>{e.mesh.position.y=this.currentScroll-e.top+this.height/2-e.height/2,e.mesh.position.x=e.left-this.width/2+e.width/2}))}addObjects(){this.material=new THREE.ShaderMaterial({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},side:THREE.DoubleSide,uniforms:{time:{value:0},resolution:{value:new THREE.Vector4}},wireframe:!0}),this.geometry=new THREE.PlaneGeometry(100,100,10,10),this.plane=new THREE.Mesh(this.geometry,this.material),this.scene.add(this.plane)}stop(){this.isPlaying=!1}play(){this.isPlaying||(this.render(),this.isPlaying=!0)}render(){this.time+=.05,this.scroll.render(),this.previousScroll=this.currentScroll,this.currentScroll=this.scroll.scrollToRender,this.setPosition(),this.customPass.uniforms.scrollSpeed.value=this.scroll.speedTarget,this.customPass.uniforms.time.value=this.time,this.materials.forEach((e=>{e.uniforms.time.value=this.time})),this.composer.render(),requestAnimationFrame(this.render.bind(this))}}new Sketch({dom:document.getElementById("container")});